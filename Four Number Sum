
#The time complexity can be improved to O(n^3) with the use of sorting as a preprocessing step.

#Algo:
#1) Sort the input array.
#2) Fix the first element as A[i] where i is from 0 to nâ€“3. 
#After fixing the first element of quadruple, fix the second element as A[j] where j varies from i+1 to n-2. 
#Find remaining two elements in O(n) time

def fourNumberSum(array, targetSum):
  array.sort()
	quadruplets = []
	for i in range(len(array)-3):
		for j in range(i+1, len(array)-2):
			left = j+1
    	right = len(array)-1
    	while left < right:
        currentSum = array[i] + array[j] + array[left] + array[right]
        if currentSum == targetSum:
          quadruplets.append([array[i], array[j], array[left], array[right]]) 
					left += 1
					right -= 1
        elif currentSum < targetSum:
        	left += 1
        elif currentSum > targetSum:
        	right -= 1
           
  return quadruplets
